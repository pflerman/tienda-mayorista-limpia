---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Panel Admin - Gestión de Productos">
  <!-- Verificar login -->
  <script is:inline>
    if (!sessionStorage.getItem('admin_logged_in')) {
      window.location.href = '/admin/login';
    }
  </script>

  <div class="min-h-screen bg-gray-50">
    <!-- Header del panel -->
    <header class="bg-white shadow-sm border-b">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-2xl font-bold text-gray-900">
              Panel de Administración
            </h1>
            <p class="text-sm text-gray-600">Gestión de productos mayoristas</p>
          </div>
          <div class="flex items-center gap-4">
            <a
              href="/productos"
              target="_blank"
              class="text-blue-600 hover:text-blue-800 text-sm"
            >
              Ver catálogo →
            </a>
            <button
              id="logout-btn"
              class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition text-sm"
            >
              Cerrar Sesión
            </button>
          </div>
        </div>
      </div>
    </header>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Botón para crear producto -->
      <div class="mb-8">
        <button
          id="btn-nuevo-producto"
          class="bg-blue-600 text-white px-6 py-3 rounded-lg font-bold hover:bg-blue-700 transition flex items-center gap-2"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
          </svg>
          Crear Nuevo Producto
        </button>
      </div>

      <!-- Lista de productos -->
      <div class="bg-white rounded-xl shadow-md p-6">
        <h2 class="text-xl font-bold text-gray-900 mb-6">
          Productos Activos
        </h2>
        
        <div id="loading" class="text-center py-12">
          <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
          <p class="text-gray-600 mt-4">Cargando productos...</p>
        </div>

        <div id="productos-lista" class="hidden space-y-4">
          <!-- Los productos se cargan dinámicamente aquí -->
        </div>

        <div id="no-productos" class="hidden text-center py-12">
          <p class="text-gray-500 text-lg">No hay productos creados todavía</p>
          <p class="text-gray-400 text-sm mt-2">Hacé click en "Crear Nuevo Producto" para empezar</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para crear/editar producto -->
  <div id="modal-producto" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
    <div class="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
      <div class="sticky top-0 bg-white border-b px-6 py-4 flex items-center justify-between">
        <h3 class="text-2xl font-bold" id="modal-titulo">Crear Producto</h3>
        <button id="modal-close" class="text-gray-500 hover:text-gray-700 text-3xl">×</button>
      </div>

      <form id="form-producto" class="p-6 space-y-6">
        <!-- Título -->
        <div>
          <label class="block text-sm font-semibold text-gray-700 mb-2">
            Título del Producto *
          </label>
          <input
            type="text"
            id="input-titulo"
            class="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            placeholder="Ej: Organizador de Zapatos Premium"
            required
          />
        </div>

        <!-- Precio Minorista -->
        <div>
          <label class="block text-sm font-semibold text-gray-700 mb-2">
            Precio Minorista (por unidad) *
          </label>
          <input
            type="number"
            id="input-precio"
            class="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            placeholder="4200"
            required
          />
        </div>

        <!-- Nombre de Foto -->
        <div>
          <label class="block text-sm font-semibold text-gray-700 mb-2">
            Nombre de la Foto *
          </label>
          <input
            type="text"
            id="input-foto"
            placeholder="pepe.webp"
            class="w-full px-4 py-2 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none"
            required
          />
          <p class="text-xs text-gray-500 mt-1">
            Solo el nombre del archivo (ejemplo: pepe.webp). Subilo a public/productos/
          </p>
        </div>

        <!-- Botones -->
        <div class="flex gap-3 pt-4">
          <button
            type="button"
            id="btn-cancelar"
            class="flex-1 border-2 border-gray-300 text-gray-700 py-3 rounded-lg font-semibold hover:bg-gray-50"
          >
            Cancelar
          </button>
          <button
            type="submit"
            class="flex-1 bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700"
          >
            Guardar Producto
          </button>
        </div>
      </form>
    </div>
  </div>

  <script>
    import { supabase } from '../../lib/supabase.js';

    // Logout
    document.getElementById('logout-btn')?.addEventListener('click', () => {
      sessionStorage.removeItem('admin_logged_in');
      window.location.href = '/admin/login';
    });

    // Abrir modal
    document.getElementById('btn-nuevo-producto')?.addEventListener('click', () => {
      document.getElementById('modal-producto')?.classList.remove('hidden');
    });

    // Cerrar modal
    const cerrarModal = () => {
      document.getElementById('modal-producto')?.classList.add('hidden');
      document.getElementById('form-producto')?.reset();
      productoEditando = null;
      const titulo = document.getElementById('modal-titulo');
      if (titulo) titulo.textContent = 'Crear Producto';
    };

    document.getElementById('modal-close')?.addEventListener('click', cerrarModal);
    document.getElementById('btn-cancelar')?.addEventListener('click', cerrarModal);

    // Guardar producto
    document.getElementById('form-producto')?.addEventListener('submit', async (e) => {
      e.preventDefault();

      const titulo = (document.getElementById('input-titulo') as HTMLInputElement).value;
      const precio = parseInt((document.getElementById('input-precio') as HTMLInputElement).value);
      const fotoNombre = (document.getElementById('input-foto') as HTMLInputElement).value;

      // Agregar /productos/ automáticamente
      const foto = `/productos/${fotoNombre}`;

      const datos = {
        titulo,
        precio,
        foto
      };

      let error;

      if (productoEditando) {
        // Actualizar producto existente
        const result = await supabase
          .from('productos_tienda')
          .update(datos)
          .eq('id', productoEditando.id);
        error = result.error;
      } else {
        // Crear nuevo producto
        const result = await supabase
          .from('productos_tienda')
          .insert(datos);
        error = result.error;
      }

      if (error) {
        alert('Error al guardar producto: ' + error.message);
        console.error(error);
        return;
      }

      alert(productoEditando ? '✅ Producto actualizado!' : '✅ Producto creado!');
      productoEditando = null;
      cerrarModal();
      cargarProductos();
    });

    // Cargar productos
    async function cargarProductos() {
      const loading = document.getElementById('loading');
      const lista = document.getElementById('productos-lista');
      const noProductos = document.getElementById('no-productos');

      loading?.classList.remove('hidden');
      lista?.classList.add('hidden');
      noProductos?.classList.add('hidden');

      const { data: productos, error } = await supabase
        .from('productos_tienda')
        .select('*')
        .order('created_at', { ascending: false });

      loading?.classList.add('hidden');

      if (error) {
        alert('Error al cargar productos: ' + error.message);
        console.error(error);
        return;
      }

      if (!productos || productos.length === 0) {
        noProductos?.classList.remove('hidden');
        return;
      }

      lista!.innerHTML = productos.map(prod => `
        <div class="border rounded-lg p-4 flex items-center gap-4">
          <img 
            src="${prod.foto || '/productos/placeholder.jpg'}" 
            alt="${prod.titulo}" 
            class="w-20 h-20 object-contain bg-gray-100 rounded p-2" 
            onerror="this.src='data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%22100%22 height=%22100%22%3E%3Crect fill=%22%23e5e7eb%22 width=%22100%22 height=%22100%22/%3E%3Ctext fill=%22%239ca3af%22 font-family=%22sans-serif%22 font-size=%2214%22 text-anchor=%22middle%22 x=%2250%22 y=%2250%22%3ESin foto%3C/text%3E%3C/svg%3E'"
          />
          <div class="flex-1">
            <h3 class="font-bold text-gray-900">${prod.titulo}</h3>
            <p class="text-sm text-gray-600">$${prod.precio?.toLocaleString('es-AR') || '0'}</p>
          </div>
          <div class="flex gap-2">
            <button onclick="editarProducto('${prod.id}')" class="text-blue-600 hover:text-blue-800 text-sm font-semibold px-3 py-1 border border-blue-600 rounded hover:bg-blue-50">
              Editar
            </button>
            <button onclick="eliminarProducto('${prod.id}')" class="text-red-600 hover:text-red-800 text-sm font-semibold px-3 py-1 border border-red-600 rounded hover:bg-red-50">
              Eliminar
            </button>
          </div>
        </div>
      `).join('');

      lista?.classList.remove('hidden');
    }

    // Eliminar producto
    (window as any).eliminarProducto = async (id: string) => {
      if (!confirm('¿Seguro que querés eliminar este producto?')) return;

      const { error } = await supabase
        .from('productos_tienda')
        .delete()
        .eq('id', id);

      if (error) {
        alert('Error al eliminar: ' + error.message);
        return;
      }

      alert('✅ Producto eliminado');
      cargarProductos();
    };

    // Variable para edición
    let productoEditando: any = null;

    // Editar producto
    (window as any).editarProducto = async (id: string) => {
      const { data: producto, error } = await supabase
        .from('productos_tienda')
        .select('*')
        .eq('id', id)
        .single();

      if (error || !producto) {
        alert('Error al cargar producto');
        return;
      }

      productoEditando = producto;

      // Llenar formulario
      (document.getElementById('input-titulo') as HTMLInputElement).value = producto.titulo || '';
      (document.getElementById('input-precio') as HTMLInputElement).value = producto.precio || '';
      
      // Remover /productos/ para mostrar solo el nombre del archivo
      const fotoNombre = producto.foto ? producto.foto.replace('/productos/', '') : '';
      (document.getElementById('input-foto') as HTMLInputElement).value = fotoNombre;

      // Cambiar título del modal
      const titulo = document.getElementById('modal-titulo');
      if (titulo) titulo.textContent = 'Editar Producto';

      // Abrir modal
      document.getElementById('modal-producto')?.classList.remove('hidden');
    };

    // Cargar productos al inicio
    cargarProductos();
  </script>
</Layout>