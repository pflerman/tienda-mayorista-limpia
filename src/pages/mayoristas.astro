---
import Layout from '../layouts/Layout.astro';
import CarritoMayorista from '../components/CarritoMayorista';
---

<Layout 
  title="Lista de Precios Mayorista - Cajas Ordenadoras" 
  description="CatÃ¡logo mayorista con precios especiales para revendedores"
>
  <!-- Header -->
  <section class="bg-gradient-to-r from-blue-600 to-blue-800 text-white py-12">
    <div class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <h1 class="text-4xl md:text-5xl font-bold mb-4">
        ðŸ‘Ÿ Cajas Ordenadoras
      </h1>
      <h2 class="text-2xl md:text-3xl font-semibold mb-3">
        Lista de Precios Mayorista
      </h2>
      <p class="text-lg text-blue-100">
        Precios especiales para revendedores â€¢ ArmÃ¡ tu pedido y envialo por WhatsApp
      </p>
    </div>
  </section>

  <!-- Lista de productos -->
  <section class="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pb-32">
    <div class="bg-blue-50 border-l-4 border-blue-600 p-4 mb-8">
      <p class="text-blue-900 font-semibold">
        ðŸ’¡ SeleccionÃ¡ las cantidades que necesitÃ©s y agregÃ¡ al carrito. Al finalizar, enviÃ¡ tu pedido por WhatsApp.
      </p>
    </div>

    <!-- Loading -->
    <div id="loading-productos" class="text-center py-12">
      <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      <p class="text-gray-600 mt-4">Cargando productos...</p>
    </div>

    <!-- Grid de productos (se llena dinÃ¡micamente) -->
    <div id="productos-container" class="space-y-6 hidden">
      <!-- Los productos se cargan aquÃ­ -->
    </div>

    <!-- Mensaje si no hay productos -->
    <div id="no-productos" class="hidden text-center py-12">
      <p class="text-gray-500 text-lg">No hay productos disponibles</p>
    </div>
  </section>

  <!-- Carrito -->
  <CarritoMayorista client:only="react" productos={[]} />

  <!-- Scripts -->
  <script>
    import { supabase } from '../lib/supabase.js';

    let productosGlobal = [];

    // Cargar productos desde Supabase
    async function cargarProductos() {
      const loading = document.getElementById('loading-productos');
      const container = document.getElementById('productos-container');
      const noProductos = document.getElementById('no-productos');

      loading?.classList.remove('hidden');
      container?.classList.add('hidden');
      noProductos?.classList.add('hidden');

      const { data: productos, error } = await supabase
        .from('productos_tienda')
        .select('*')
        .order('created_at', { ascending: false });

      loading?.classList.add('hidden');

      if (error || !productos || productos.length === 0) {
        noProductos?.classList.remove('hidden');
        return;
      }

      productosGlobal = productos;

      // Generar HTML de productos
      if (container) {
        container.innerHTML = productos.map(producto => `
          <div class="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition">
            <div class="md:flex">
              <!-- Imagen -->
              <div class="md:w-48 md:flex-shrink-0 bg-white">
                <img
                  src="${producto.foto}"
                  alt="${producto.titulo}"
                  class="h-48 w-full md:h-full object-contain p-4"
                  onerror="this.src='data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%22400%22 height=%22400%22%3E%3Crect fill=%22%23e5e7eb%22 width=%22400%22 height=%22400%22/%3E%3Ctext fill=%22%239ca3af%22 font-family=%22sans-serif%22 font-size=%2220%22 text-anchor=%22middle%22 x=%22200%22 y=%22200%22%3ESin imagen%3C/text%3E%3C/svg%3E'"
                />
              </div>

              <!-- Contenido -->
              <div class="p-6 flex-1">
                <div class="flex flex-col md:flex-row md:items-start md:justify-between gap-4">
                  <!-- Info del producto -->
                  <div class="flex-1">
                    <h3 class="text-xl font-bold text-gray-900 mb-4">
                      ${producto.titulo}
                    </h3>

                    <!-- Precio -->
                    <div class="mb-4">
                      <p class="text-3xl font-bold text-blue-600">
                        $${producto.precio?.toLocaleString('es-AR') || '0'}
                        <span class="text-lg text-gray-500 font-normal">/ unidad</span>
                      </p>
                    </div>
                  </div>

                  <!-- Selectores de cantidad -->
                  <div class="md:w-64">
                    <div class="bg-gray-50 rounded-lg p-4">
                      <p class="text-sm font-semibold text-gray-700 mb-3">Cantidad:</p>
                      
                      <div class="grid grid-cols-3 gap-2 mb-3">
                        <button
                          class="btn-cantidad bg-blue-600 text-white py-2 px-3 rounded font-bold hover:bg-blue-700 transition"
                          data-producto-id="${producto.id}"
                          data-cantidad="10"
                        >
                          +10
                        </button>
                        <button
                          class="btn-cantidad bg-blue-600 text-white py-2 px-3 rounded font-bold hover:bg-blue-700 transition"
                          data-producto-id="${producto.id}"
                          data-cantidad="50"
                        >
                          +50
                        </button>
                        <button
                          class="btn-cantidad bg-blue-600 text-white py-2 px-3 rounded font-bold hover:bg-blue-700 transition"
                          data-producto-id="${producto.id}"
                          data-cantidad="100"
                        >
                          +100
                        </button>
                      </div>

                      <div class="flex items-center gap-2 mb-3">
                        <button
                          class="btn-restar w-10 h-10 bg-gray-200 rounded font-bold hover:bg-gray-300"
                          data-producto-id="${producto.id}"
                        >
                          âˆ’
                        </button>
                        <input
                          type="number"
                          class="input-cantidad flex-1 text-center border-2 border-gray-300 rounded py-2 font-bold text-lg"
                          data-producto-id="${producto.id}"
                          value="0"
                          min="0"
                        />
                        <button
                          class="btn-sumar w-10 h-10 bg-gray-200 rounded font-bold hover:bg-gray-300"
                          data-producto-id="${producto.id}"
                        >
                          +
                        </button>
                      </div>

                      <div class="mb-3">
                        <p class="text-sm text-gray-600">Subtotal:</p>
                        <p class="subtotal text-xl font-bold text-gray-900" data-producto-id="${producto.id}">
                          $0
                        </p>
                      </div>

                      <button
                        class="btn-agregar-carrito w-full bg-green-600 text-white py-3 rounded-lg font-bold hover:bg-green-700 transition"
                        data-producto-id="${producto.id}"
                      >
                        ðŸ›’ Agregar al Carrito
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `).join('');

        container.classList.remove('hidden');
        
        // Configurar event listeners despuÃ©s de cargar el HTML
        configurarEventListeners();
      }
    }

    // Configurar todos los event listeners
    function configurarEventListeners() {
      // Actualizar cantidad y subtotal
      function actualizarSubtotal(productoId) {
        const input = document.querySelector(`.input-cantidad[data-producto-id="${productoId}"]`);
        const subtotalEl = document.querySelector(`.subtotal[data-producto-id="${productoId}"]`);
        const cantidad = parseInt(input.value) || 0;
        
        // Buscar el producto en el array global
        const producto = productosGlobal.find(p => p.id === productoId);
        if (!producto) return;
        
        const subtotal = producto.precio * cantidad;
        subtotalEl.textContent = `$${subtotal.toLocaleString('es-AR')}`;
      }

      // Botones de cantidad rÃ¡pida (+10, +50, +100)
      document.querySelectorAll('.btn-cantidad').forEach(btn => {
        btn.addEventListener('click', () => {
          const productoId = btn.dataset.productoId;
          const cantidad = parseInt(btn.dataset.cantidad);
          const input = document.querySelector(`.input-cantidad[data-producto-id="${productoId}"]`);
          
          input.value = parseInt(input.value || 0) + cantidad;
          actualizarSubtotal(productoId);
        });
      });

      // Botones + y -
      document.querySelectorAll('.btn-sumar').forEach(btn => {
        btn.addEventListener('click', () => {
          const productoId = btn.dataset.productoId;
          const input = document.querySelector(`.input-cantidad[data-producto-id="${productoId}"]`);
          input.value = parseInt(input.value || 0) + 1;
          actualizarSubtotal(productoId);
        });
      });

      document.querySelectorAll('.btn-restar').forEach(btn => {
        btn.addEventListener('click', () => {
          const productoId = btn.dataset.productoId;
          const input = document.querySelector(`.input-cantidad[data-producto-id="${productoId}"]`);
          const nuevoValor = Math.max(0, parseInt(input.value || 0) - 1);
          input.value = nuevoValor;
          actualizarSubtotal(productoId);
        });
      });

      // Input manual
      document.querySelectorAll('.input-cantidad').forEach(input => {
        input.addEventListener('input', () => {
          const productoId = input.dataset.productoId;
          actualizarSubtotal(productoId);
        });
      });

      // Agregar al carrito
      document.querySelectorAll('.btn-agregar-carrito').forEach(btn => {
        btn.addEventListener('click', () => {
          const productoId = btn.dataset.productoId;
          const producto = productosGlobal.find(p => p.id === productoId);
          const input = document.querySelector(`.input-cantidad[data-producto-id="${productoId}"]`);
          const cantidad = parseInt(input.value) || 0;

          if (cantidad <= 0) {
            alert('Por favor, seleccionÃ¡ una cantidad mayor a 0');
            return;
          }

          if (!producto) {
            alert('Error al agregar el producto');
            return;
          }

          // Adaptar el producto al formato que espera el carrito
          const productoParaCarrito = {
            id: producto.id,
            nombre: producto.titulo,
            precioMinorista: producto.precio,
            imagenes: [producto.foto]
          };

          // Llamar a la funciÃ³n del carrito
          if (window.agregarAlCarritoMayorista) {
            window.agregarAlCarritoMayorista(productoParaCarrito, cantidad);
            
            // Resetear cantidad
            input.value = 0;
            actualizarSubtotal(productoId);
            
            // Feedback visual
            btn.textContent = 'âœ“ Agregado!';
            btn.classList.add('bg-green-700');
            setTimeout(() => {
              btn.textContent = 'ðŸ›’ Agregar al Carrito';
              btn.classList.remove('bg-green-700');
            }, 1500);
          }
        });
      });
    }

    // Cargar productos al iniciar
    cargarProductos();
  </script>
</Layout>